"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decorateFindReferences = void 0;
const utils_1 = require("../utils");
function decorateFindReferences(ls, snapshotManager, logger) {
    decorateGetReferencesAtPosition(ls, snapshotManager, logger);
    _decorateFindReferences(ls, snapshotManager, logger);
}
exports.decorateFindReferences = decorateFindReferences;
function _decorateFindReferences(ls, snapshotManager, logger) {
    const findReferences = ls.findReferences;
    ls.findReferences = (fileName, position) => {
        const references = findReferences(fileName, position);
        return references === null || references === void 0 ? void 0 : references.map((reference) => {
            const snapshot = snapshotManager.get(reference.definition.fileName);
            if (!(0, utils_1.isSvelteFilePath)(reference.definition.fileName) || !snapshot) {
                return reference;
            }
            const textSpan = snapshot.getOriginalTextSpan(reference.definition.textSpan);
            if (!textSpan) {
                return null;
            }
            return {
                definition: {
                    ...reference.definition,
                    textSpan,
                    // Spare the work for now
                    originalTextSpan: undefined
                },
                references: mapReferences(reference.references, snapshotManager, logger)
            };
        }).filter(utils_1.isNotNullOrUndefined);
    };
}
function decorateGetReferencesAtPosition(ls, snapshotManager, logger) {
    const getReferencesAtPosition = ls.getReferencesAtPosition;
    ls.getReferencesAtPosition = (fileName, position) => {
        const references = getReferencesAtPosition(fileName, position);
        return references && mapReferences(references, snapshotManager, logger);
    };
}
function mapReferences(references, snapshotManager, logger) {
    return references
        .map((reference) => {
        const snapshot = snapshotManager.get(reference.fileName);
        if (!(0, utils_1.isSvelteFilePath)(reference.fileName) || !snapshot) {
            return reference;
        }
        const textSpan = snapshot.getOriginalTextSpan(reference.textSpan);
        if (!textSpan) {
            return null;
        }
        logger.debug('Find references; map textSpan: changed', reference.textSpan, 'to', textSpan);
        return {
            ...reference,
            textSpan,
            // Spare the work for now
            contextSpan: undefined,
            originalTextSpan: undefined,
            originalContextSpan: undefined
        };
    })
        .filter(utils_1.isNotNullOrUndefined);
}

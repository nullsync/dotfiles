"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decorateRename = void 0;
const utils_1 = require("../utils");
function decorateRename(ls, snapshotManager, logger) {
    const findRenameLocations = ls.findRenameLocations;
    ls.findRenameLocations = (fileName, position, findInStrings, findInComments, providePrefixAndSuffixTextForRename) => {
        const renameLocations = findRenameLocations(fileName, position, findInStrings, findInComments, providePrefixAndSuffixTextForRename);
        return renameLocations === null || renameLocations === void 0 ? void 0 : renameLocations.map((renameLocation) => {
            const snapshot = snapshotManager.get(renameLocation.fileName);
            if (!(0, utils_1.isSvelteFilePath)(renameLocation.fileName) || !snapshot) {
                return renameLocation;
            }
            // TODO more needed to filter invalid locations, see RenameProvider
            const textSpan = snapshot.getOriginalTextSpan(renameLocation.textSpan);
            if (!textSpan) {
                return null;
            }
            const converted = {
                ...renameLocation,
                textSpan
            };
            if (converted.contextSpan) {
                // Not important, spare the work
                converted.contextSpan = undefined;
            }
            logger.debug('Converted rename location ', converted);
            return converted;
        }).filter(utils_1.isNotNullOrUndefined);
    };
}
exports.decorateRename = decorateRename;
